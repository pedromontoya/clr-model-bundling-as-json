<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", null, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

    <!--Include Javascript models for objects found in the specified bundle namespace(ClrModelBundling.Web.Models)-->
    <script src="~/bundles/js/clrmodels"></script>

    <script>
        $(function () {
            //The serialized objects can be used inside of client side views/view-models and bound to UI elements.
            var ClientLoginViewModel = function (username, password) {

                //Initialize client side data model by extending the default server side JSON object instance.
                this.data = $.extend({}, TEST.LoginViewModel);

                //Initialize credentials
                this.data.UserName = username;
                this.data.Password = password;

                this.getCreds = function () {
                    return "Username: " + this.data.UserName + ", Password: " + this.data.Password;
                };
            };

            //Create instance
            var jdoeLogin = new ClientLoginViewModel("jdoe", "password2");
            alert(jdoeLogin.getCreds());

        });
    </script>
</body>
</html>
